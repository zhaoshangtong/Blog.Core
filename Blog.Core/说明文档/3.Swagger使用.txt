1.安装：右键项目中的 Dependencies -- > Manage Nuget Packags --> Browse --> Search "Swashbuckle.AspNetCore" --> Install

2.将swagger注入到ConfigureServices.
            services.AddSwaggerGen(c => 
            {
                c.SwaggerDoc("v1", new Info
                {
                    Version = "v0.1.0",
                    Title = "Blog.Core API",
                    Description = "框架说明文档",
                    TermsOfService = "None",
                    Contact = new Contact { Name = "Blog.Core", Email = "Blog.Core@xxx.com", Url = "https://www.jianshu.com/u/94102b59cc2a" }
                });
            });




3.添加swagger中间件到Configure。要写app.UserMvc()之前。另外输出文档最好是在开发环境下才安全。
          app.UseSwagger();
            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "ApiHelp V1");
            });


4.修改默认路由，使swagger成为启动项：即修改launchSetting.json的profiles与Blog.Core的launchUrl

5.添加注释到swagger页面上
  5.1右键项目名称=>属性=>生成，勾选“输出”下面的“xml文档文件”，系统会默认生成一个.
  5.2配置好了xml文件，接下来需要让系统启动的时候，去读取这个文件了.修改ConfigureServices函数
   public void ConfigureServices(IServiceCollection services)
        {
            ...
            services.AddSwaggerGen(c =>
            {
                ...
                //就是这里

                var basePath = Microsoft.DotNet.PlatformAbstractions.ApplicationEnvironment.ApplicationBasePath;
                var xmlPath = Path.Combine(basePath, "Blog.Core.xml");//这个就是刚刚配置的xml文件名
                c.IncludeXmlComments(xmlPath, true);//默认的第二个参数是false，这个是controller的注释，记得修改
            });
        }


6.如果需要将其他程序集生成的xml也被swagger读取。例如：Model程序集的实体注释也希望显示在swagger上
  6.1右键项目名称=>属性=>生成，勾选“输出”下面的“xml文档文件”，系统会默认生成一个.
  6.2修改ConfigureServices函数
  public void ConfigureServices(IServiceCollection services)
        {
            ...
            services.AddSwaggerGen(c =>
            {
                ...
                var basePath = Microsoft.DotNet.PlatformAbstractions.ApplicationEnvironment.ApplicationBasePath;
                var xmlPath = Path.Combine(basePath, "Blog.Core.xml");//这个就是刚刚配置的xml文件名
                c.IncludeXmlComments(xmlPath, true);//默认的第二个参数是false，这个是controller的注释，记得修改
				//在下面继续添加

				var xmlModelPath = Path.Combine(basePath, "Blog.Core.Model.xml");//这个就是Model层的xml文件名
                c.IncludeXmlComments(xmlModelPath);

            });
        }